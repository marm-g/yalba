// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Champion {
    id     String  @id // these are all simple numbers, but keeping this the same as the Riot API
    name   String
    slug   String // filepath/URL friendly champ name
    // TODO(reno): Make sure this looks correct, I might have done it in the opposite order
    builds Build[]
}

// TODO(reno): see if CUID is actually a good idea here
model Build {
    id           String   @id @default(cuid())
    championId   String
    // TODO(reno): I think this onDelete is wrong - if a build gets deleted, we just want to remove
    // it from the Champion, not also delete the Champion object
    champion     Champion @relation(fields: [championId], references: [id])
    abilityOrder String[]
    description  String
    winRate      Float
    mythicItemId String
    mythicItem   Item     @relation(fields: [mythicItemId], references: [id])
    gameMode     GameMode @relation(fields: [gameModeId], references: [id])
    gameModeId   String
    keystone     Rune     @relation(fields: [runeId], references: [id])
    runeId       String
}

model Item {
    id             String  @id
    name           String
    description    String
    itemType       String
    buildsAsMythic Build[]
}

model Rune {
    id               String  @id
    name             String
    slug             String
    tree             String
    depth            Int
    description      String
    buildsAsKeystone Build[]
}

model GameMode {
    id     String  @id @default(cuid())
    mapId  String // Riot stores this info, so this is a reference to their data, if we need it.
    name   String
    builds Build[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
